/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Cloud Cost Management API
 * API for managing cloud costs, tracking usage, and organizing services into projects.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetAwsEc2Instances200Item,
  GetAwsEc2InstancesInstanceSku200,
  GetAwsEc2InstancesParams,
  GetAwsRdsInstances200Item,
  GetAwsRdsInstancesInstanceSku200,
  GetAwsRdsInstancesParams
} from '../../model'



/**
 * @summary Get EC2 instances cost with optional filtering
 */
export const getAwsEc2Instances = (
    params?: GetAwsEc2InstancesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAwsEc2Instances200Item[]>> => {
    
    return axios.get(
      `/aws/ec2/instances`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAwsEc2InstancesQueryKey = (params?: GetAwsEc2InstancesParams,) => {
    return [`/aws/ec2/instances`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAwsEc2InstancesQueryOptions = <TData = Awaited<ReturnType<typeof getAwsEc2Instances>>, TError = AxiosError<void>>(params?: GetAwsEc2InstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAwsEc2Instances>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAwsEc2InstancesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAwsEc2Instances>>> = ({ signal }) => getAwsEc2Instances(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAwsEc2Instances>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAwsEc2InstancesQueryResult = NonNullable<Awaited<ReturnType<typeof getAwsEc2Instances>>>
export type GetAwsEc2InstancesQueryError = AxiosError<void>

/**
 * @summary Get EC2 instances cost with optional filtering
 */
export const useGetAwsEc2Instances = <TData = Awaited<ReturnType<typeof getAwsEc2Instances>>, TError = AxiosError<void>>(
 params?: GetAwsEc2InstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAwsEc2Instances>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAwsEc2InstancesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get EC2 instance cost by SKU
 */
export const getAwsEc2InstancesInstanceSku = (
    instanceSku: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAwsEc2InstancesInstanceSku200>> => {
    
    return axios.get(
      `/aws/ec2/instances/${instanceSku}`,options
    );
  }


export const getGetAwsEc2InstancesInstanceSkuQueryKey = (instanceSku: string,) => {
    return [`/aws/ec2/instances/${instanceSku}`] as const;
    }

    
export const getGetAwsEc2InstancesInstanceSkuQueryOptions = <TData = Awaited<ReturnType<typeof getAwsEc2InstancesInstanceSku>>, TError = AxiosError<void>>(instanceSku: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAwsEc2InstancesInstanceSku>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAwsEc2InstancesInstanceSkuQueryKey(instanceSku);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAwsEc2InstancesInstanceSku>>> = ({ signal }) => getAwsEc2InstancesInstanceSku(instanceSku, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(instanceSku), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAwsEc2InstancesInstanceSku>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAwsEc2InstancesInstanceSkuQueryResult = NonNullable<Awaited<ReturnType<typeof getAwsEc2InstancesInstanceSku>>>
export type GetAwsEc2InstancesInstanceSkuQueryError = AxiosError<void>

/**
 * @summary Get EC2 instance cost by SKU
 */
export const useGetAwsEc2InstancesInstanceSku = <TData = Awaited<ReturnType<typeof getAwsEc2InstancesInstanceSku>>, TError = AxiosError<void>>(
 instanceSku: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAwsEc2InstancesInstanceSku>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAwsEc2InstancesInstanceSkuQueryOptions(instanceSku,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get AWS RDS instances cost with optional filtering
 */
export const getAwsRdsInstances = (
    params?: GetAwsRdsInstancesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAwsRdsInstances200Item[]>> => {
    
    return axios.get(
      `/aws/rds/instances`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAwsRdsInstancesQueryKey = (params?: GetAwsRdsInstancesParams,) => {
    return [`/aws/rds/instances`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAwsRdsInstancesQueryOptions = <TData = Awaited<ReturnType<typeof getAwsRdsInstances>>, TError = AxiosError<void>>(params?: GetAwsRdsInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAwsRdsInstances>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAwsRdsInstancesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAwsRdsInstances>>> = ({ signal }) => getAwsRdsInstances(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAwsRdsInstances>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAwsRdsInstancesQueryResult = NonNullable<Awaited<ReturnType<typeof getAwsRdsInstances>>>
export type GetAwsRdsInstancesQueryError = AxiosError<void>

/**
 * @summary Get AWS RDS instances cost with optional filtering
 */
export const useGetAwsRdsInstances = <TData = Awaited<ReturnType<typeof getAwsRdsInstances>>, TError = AxiosError<void>>(
 params?: GetAwsRdsInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAwsRdsInstances>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAwsRdsInstancesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get RDS instance cost by SKU
 */
export const getAwsRdsInstancesInstanceSku = (
    instanceSku: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAwsRdsInstancesInstanceSku200>> => {
    
    return axios.get(
      `/aws/rds/instances/${instanceSku}`,options
    );
  }


export const getGetAwsRdsInstancesInstanceSkuQueryKey = (instanceSku: string,) => {
    return [`/aws/rds/instances/${instanceSku}`] as const;
    }

    
export const getGetAwsRdsInstancesInstanceSkuQueryOptions = <TData = Awaited<ReturnType<typeof getAwsRdsInstancesInstanceSku>>, TError = AxiosError<void>>(instanceSku: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAwsRdsInstancesInstanceSku>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAwsRdsInstancesInstanceSkuQueryKey(instanceSku);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAwsRdsInstancesInstanceSku>>> = ({ signal }) => getAwsRdsInstancesInstanceSku(instanceSku, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(instanceSku), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAwsRdsInstancesInstanceSku>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAwsRdsInstancesInstanceSkuQueryResult = NonNullable<Awaited<ReturnType<typeof getAwsRdsInstancesInstanceSku>>>
export type GetAwsRdsInstancesInstanceSkuQueryError = AxiosError<void>

/**
 * @summary Get RDS instance cost by SKU
 */
export const useGetAwsRdsInstancesInstanceSku = <TData = Awaited<ReturnType<typeof getAwsRdsInstancesInstanceSku>>, TError = AxiosError<void>>(
 instanceSku: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAwsRdsInstancesInstanceSku>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAwsRdsInstancesInstanceSkuQueryOptions(instanceSku,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



