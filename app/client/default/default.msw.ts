/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Cloud Cost Management API
 * API for managing cloud costs, tracking usage, and organizing services into projects.
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetAwsEc2Instances200Item,
  GetAwsEc2InstancesInstanceSku200,
  GetAwsRdsInstances200Item,
  GetAwsRdsInstancesInstanceSku200
} from '../../model'

export const getGetAwsEc2InstancesResponseMock = (): GetAwsEc2Instances200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), instancetype: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), instancefamily: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), vcpu: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), memory: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ondemandprice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetAwsEc2InstancesInstanceSkuResponseMock = (overrideResponse: Partial< GetAwsEc2InstancesInstanceSku200 > = {}): GetAwsEc2InstancesInstanceSku200 => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), region: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), instance_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), instance_family: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), vcpu: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), physical_processor: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), clockspeed: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), memory: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), networkper_formance: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), os: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dedicatedebs_throughput: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ecu: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gpu_memory: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), processor_features: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ondemand_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), one_year_reserved_standard_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), three_year_reserved_standard_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), one_year_reserved_convertible_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), three_year_reserved_convertible_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetAwsRdsInstancesResponseMock = (): GetAwsRdsInstances200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), instance_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), instance_family: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), database_engine: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), regioncode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), vcpu: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), memory: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ondemandprice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetAwsRdsInstancesInstanceSkuResponseMock = (overrideResponse: Partial< GetAwsRdsInstancesInstanceSku200 > = {}): GetAwsRdsInstancesInstanceSku200 => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), region: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), instance_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), instance_family: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), vcpu: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), physical_processor: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), clockspeed: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), memory: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), networkper_formance: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), database_engine: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dedicated_ebs_throughput: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ondemand_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), one_year_reserved_standard_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), three_year_reserved_standard_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})


export const getGetAwsEc2InstancesMockHandler = (overrideResponse?: GetAwsEc2Instances200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAwsEc2Instances200Item[]> | GetAwsEc2Instances200Item[])) => {
  return http.get('*/aws/ec2/instances', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAwsEc2InstancesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAwsEc2InstancesInstanceSkuMockHandler = (overrideResponse?: GetAwsEc2InstancesInstanceSku200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAwsEc2InstancesInstanceSku200> | GetAwsEc2InstancesInstanceSku200)) => {
  return http.get('*/aws/ec2/instances/:instanceSku', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAwsEc2InstancesInstanceSkuResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAwsRdsInstancesMockHandler = (overrideResponse?: GetAwsRdsInstances200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAwsRdsInstances200Item[]> | GetAwsRdsInstances200Item[])) => {
  return http.get('*/aws/rds/instances', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAwsRdsInstancesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAwsRdsInstancesInstanceSkuMockHandler = (overrideResponse?: GetAwsRdsInstancesInstanceSku200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAwsRdsInstancesInstanceSku200> | GetAwsRdsInstancesInstanceSku200)) => {
  return http.get('*/aws/rds/instances/:instanceSku', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAwsRdsInstancesInstanceSkuResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getDefaultMock = () => [
  getGetAwsEc2InstancesMockHandler(),
  getGetAwsEc2InstancesInstanceSkuMockHandler(),
  getGetAwsRdsInstancesMockHandler(),
  getGetAwsRdsInstancesInstanceSkuMockHandler()
]
